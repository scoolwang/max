<template>
<view class="page">
  <view class="header">
    <view class="cover-box">
      <swiper current="{{swiperIndex}}" indicator-dots=true>
        <block>
          <swiper-item>
            <view class="cover-module">

              <image  mode="aspectFill" class="cover" src="https://5b0988e595225.cdn.sohucs.com/images/20180428/ef486d72e6f4426b8afe0a6b53dd078a.jpg" alt=""></image>
              <view class="cover-module" wx:if="{{stepTodyList.length > 0}}">
                <view class="gunjun-title">今日冠军</view>
                <view class="gunjun-info">
                  <view class="gunjun-img"><image mode="aspectFill" src="{{todyGuanjun.img}}"></image></view>
                  <view>{{todyGuanjun.nick}}</view>
                </view>
              </view>
            </view>
          </swiper-item>
        </block>
        <block>
          <swiper-item>
            <view class="cover-module">

              <image  mode="aspectFill" class="cover" src="https://5b0988e595225.cdn.sohucs.com/images/20180428/ef486d72e6f4426b8afe0a6b53dd078a.jpg" alt=""></image>
              <view class="cover-module" wx:if="{{groupHistoryList.length > 0}}">
                <view class="gunjun-title">小组冠军</view>
                <view class="gunjun-info">
                  <view class="gunjun-list">
                    <view class="gunjun-img" wx:for="{{groupHistoryList[0].group.openIds}}">
                      <image mode="aspectFill" src="{{userMap[item].img}}"></image>
                    </view>
                  </view>
                  <view>{{groupHistoryList[0].group.name}}</view>
                </view>
              </view>
            </view>
          </swiper-item>
        </block>
        <block>
          <swiper-item>
            <view class="cover-module">

              <image  mode="aspectFill" class="cover" src="https://5b0988e595225.cdn.sohucs.com/images/20180428/ef486d72e6f4426b8afe0a6b53dd078a.jpg" alt=""></image>
              <view class="cover-module" wx:if="{{stepHistoryList.length > 0}}">
                <view class="gunjun-title">总冠军</view>
                <view class="gunjun-info">
                  <view class="gunjun-img"><image mode="aspectFill" src="{{userMap[stepHistoryList[0].openId].img}}"></image></view>
                  <view>{{userMap[stepHistoryList[0].openId].nick}}</view>
                </view>
              </view>
            </view>
          </swiper-item>
        </block>
      </swiper>

    </view>
    <view class="tab">
      <view bindtap="tabChange" data-idx=0>
        今日
        <view class="line" wx:if="{{index==0}}"></view>
      </view>
      <view bindtap="tabChange" data-idx=1>小组
        <view class="line" wx:if="{{index==1}}"></view>
      </view>
      <view bindtap="tabChange" data-idx=2>总排名
        <view class="line" wx:if="{{index==2}}"></view>
      </view>
    </view>
  </view>

  <view class="content-swiper">
  <swiper current="{{index}}" bindchange="swiperChange">
    <block>
      <swiper-item>
        <scroll-view class="scroll-page">
          <view class="slot"></view>
          <view class="step-info self-step-info" wx:if="{{stepTodyMap[userInfo.openId].sort > 1}}">
            <view class="avatar-box">
              <image mode="aspectFill" class="avatar" src="{{userMap[userInfo.openId].img}}"></image>
            </view>
            <view class="nick">
              <view>{{userMap[userInfo.openId].nick}}</view>
              <view class="seft-sort">第 {{stepTodyMap[userInfo.openId].sort}} 名</view>
            </view>
            <view class="step">{{stepTodyMap[userInfo.openId].step}}</view>
          </view>
          <view wx:for="{{stepTodyList}}" class="step-info">
            <view class="sort">
              {{index +  1}}
            </view>
            <view class="avatar-box">
              <image mode="aspectFill" class="avatar" src="{{userMap[item.openId].img}}"></image>
            </view>
            <view class="nick">{{userMap[item.openId].nick}}</view>
            <view class="step">{{item.step}}</view>
          </view>
        </scroll-view>
      </swiper-item>
    </block>
    <block>
      <swiper-item>
        <scroll-view  scroll-y="{{true}}" class="scroll-page group-page">
          <view class="scroll-inner">
            <view class="slot"></view>
            <view class="mygroup" wx:if="{{myGroup.hasGroup}}">
              <view class="group-title">

                <view class="group-name">
                   <view class="name">{{myGroup.mygroup.name}}</view>
                   <view class="seft-sort">第 {{myGroup.sort}} 名</view>
                </view>
                <view class="step">{{myGroup.step}}</view>
              </view>
              <view class="step-info" wx:for="{{myGroup.mygroup.openIds}}">
                <view class="avatar-box">
                  <image class="avatar" mode="aspectFill" src="{{userMap[item].img}}"></image>
                </view>
                <view class="nick">{{userMap[item].nick}}</view>
                <view class="step">{{stepHistoryObj[item].step}}</view>
              </view>
              <button open-type="share" wx:if="{{!myGroup.limit}}" class="share-button">+邀请好友组队</button>
            </view>

            <view wx:for="{{groupHistoryList}}">
              <view class="group-title">
                <view class="sort">{{index + 1}}</view>
                <view class="group-name">{{item.group.name}}</view>
                <view class="step">{{item.step}}</view>
              </view>
              <view class="step-info" wx:for="{{item.group.openIds}}">

                <!-- <view class="sort">
                  {{index +  1}}
                </view> -->
                <view class="avatar-box">
                  <image class="avatar" mode="aspectFill" src="{{userMap[item].img}}"></image>
                </view>
                <view class="nick">{{userMap[item].nick}}</view>
                <view class="step">{{stepHistoryObj[item].step}}</view>
              </view>
            </view>
            <view wx:if="{{groupHistoryList.length <=0}}" class="empty">
              <view>还未有人进行组队～</view>
            </view>
          </view>

        </scroll-view>
        <view class="create-button" bindtap="ctg" wx:if="{{!myGroup.hasGroup}}">创建小组</view>
      </swiper-item>
    </block>
    <block>
      <swiper-item>
        <scroll-view class="scroll-page">
          <view class="slot"></view>
          <view class="step-info self-step-info" wx:if="{{stepHistoryObj[userInfo.openId].sort > 1}}">
            <view class="avatar-box">
              <image mode="aspectFill" class="avatar" src="{{userMap[userInfo.openId].img}}"></image>
            </view>
            <view class="nick">
              <view>{{userMap[userInfo.openId].nick}}</view>
              <view class="seft-sort">第 {{stepHistoryObj[userInfo.openId].sort}} 名</view>
            </view>
            <view class="step">{{stepHistoryObj[userInfo.openId].step}}</view>
          </view>
          <view wx:for="{{stepHistoryList}}" class="step-info">
            <view class="sort">
              {{index +  1}}
            </view>
            <view class="avatar-box">
              <image mode="aspectFill" class="avatar" src="{{userMap[item.openId].img}}"></image>
            </view>
            <view class="nick">{{userMap[item.openId].nick}}</view>
            <view class="step">{{item.step}}</view>
          </view>
        </scroll-view>
      </swiper-item>
    </block>
  </swiper>
  </view>
</view>
  <toast id="toast" />
 <!-- <view><button open-type="getUserInfo">yong</button></view> -->
  <view class="mask" wx:if="{{show}}">
    <view class="pop-content">
      <!-- <input type="text" placeholder="请输入小组名字" placeholder-style="color:#c9c9c9" name=""> -->
      <k-input
        label=""
        value=""
        maxlength=15
        bind:input="inputchange"
        custom-class="kinput"
        placeholder="小组名字"/>
      <view class="foot">
        <button type="default" bindtap="close" size="mini">取消</button>
        <button type="primary" bindtap="confirm" size="mini" disabled="{{groupName.length <= 0}}" loading="{{createLoading}}">确定</button>
      </view>
    </view>
  </view>
</template>
<style lang="less">
  .page {
    height: 100%;
    display: flex;
    flex-direction: column;
  }
  .content-swiper {
    flex: 1;
    margin-top: 15px;
    position: relative;
    /*height: 100%;*/
    swiper {
      position: absolute;
      height: 100%;
      width: 100%;
      /*height: 300px;*/
    }
  }
  .empty {
    font-size: 12px;
    color: #c9c9c9;
    margin-top: 35px;
    text-align: center;
  }
  .mask {
    height: 100%;
    position: absolute;
    top: 0;
    bottom: 0;
    width: 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
    background: rgba(0,0,0, 0.5);
    z-index: 22;
    .foot {
      /*margin-top: 30px;*/
    }
    .kinput {
      margin: 30px 0;
    }
    /*input {
      margin: 30px 0;
      font-size: 14px;
      border: 1px solid #f4f4f4;
      padding: 5px 10px;
      border-radius: 5px;
    }*/
    .pop-content {
      background: #fff;
      margin: 0 30px;
      padding: 10px 20px;
    }
    .foot {
      display: flex;
      justify-content: flex-end;
      button {
        margin: 0 10px;
      }
    }
  }

  .header {
    height: 250px;
    width: 100%;
    /*position: fixed;*/
    top: 0;
    z-index: 11;
  }
  .avatar {
    height: 40px;
    width: 40px;
    border-radius: 50%;
  }
  .scroll-page {
    height: 100%;
  }
  .scroll-inner {
    padding-bottom: 100px;
  }
  .create-button {
    height: 45px;
    line-height: 45px;
    bottom: 0;
    width: 100%;
    text-align: center;
    position: fixed;
    bottom: 0;
    background: #54A3FF;
    color: #fff;
    font-size: 12px;
  }
  .cover-box {
    position: relative;
    width: 100%;
    height: 200px;
    overflow: hidden;
    swiper {
      height: 100%;
    }
    .cover-module {
      height: 200px;
      display: flex;
      align-items: center;
      flex-direction: column;
    }
    .avatar {
      width: 50px;
      height: 50px;
    }
    .gunjun-img {
      width: 50px;
      height: 50px;
      border-radius: 50%;
      box-shadow: 0 2px 2px 2px rgba(255, 255, 255, 0.5);
      image {
        width: 50px;
        height: 50px;
        border-radius: 50%;
      }
    }
    .cover {
      width: 100%;
      height: 200px;
      position: absolute;
      top: 0;
      z-index: 0;
    }
    .gunjun-title {
      position: relative;
      z-index: 1;
      color: #fff;
      /*background: rgba(255,0,0,0.5);*/
      margin-top: 30px;
      font-size: 12px;
      border-radius: 10px;
      padding: 0 10px;
      height: 25px;
      line-height: 25px;
      font-family: PingFangSC-Regular;
    }
    .gunjun-info {
      position: relative;
      z-index: 1;
      font-size: 14px;
      color: #fff;
      margin-top: 10px;
      text-align: center;
      font-family: PingFangSC-Regular;
      display: flex;
      flex-direction: column;
      align-items: center;
    }
  }
  .tab {
    height: 50px;
    background: #fff;
    line-height: 50px;
    display: flex;
    justify-content: space-between;
    font-size: 14px;
    padding: 0 20px;
    .line {
      height: 2px;
      background: #7ED321;
    }
  }
  .slot {
    /*height: 265px;*/
  }
  page {
    height: 100%;
    background: #F4F4F4;
  }
  .step-info {
    height: 65px;
    display: flex;
    align-items: center;
    padding: 0 20px;
    background: #fff;
    margin-bottom: 1px;
  }
  .sort, .avatar-box, .nick {
    margin-right: 18px;
  }
  .avatar-box {
    height: 40px;
    width: 40px;
  }
  .nick {
    font-size: 14px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    width: 100%;
  }
  .sort {
    font-size: 18px;
    font-weight: bold;
  }
  .step {
    flex: 1;
    text-align: right;
    font-size: 18px;
    color: #417505;
  }
  .seft-sort {
    font-size: 12px;
    color: #D3D3D3;
  }
  .self-step-info {
    padding-left: 44px;
    margin-bottom: 15px;
  }
  .group-page {
    .step-info {
      padding: 0 40px;
    }
    .group-name {
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      width: 100%;
      .name {
        font-size: 12px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        width: 100%;
      }
      .sort {
        font-size: 10px;
        color: #c9c9c9;
        font-family: PingFangSC-Regular;
      }
    }
    .mygroup {
      margin-bottom: 15px;
    }
  }
  .group-title {
    background: #F2F8FF;
    height: 55px;
    padding: 0 20px;
    display: flex;
    align-items: center;
    font-size: 16px;
    .step {
      color: #54A3FF;
    }
  }
  .gunjun-list {
    display: flex;
    margin-bottom: 10px;
    .gunjun-img {
      margin: 0 5px;
      height: 40px;
      width: 40px;
      image {
        height: 40px;
        width: 40px;
      }
    }
  }
  .share-button {
    background: #fff;
    border-radius: 0;
    color: #4A90E2;
    text-align: center;
    height: 45px;
    line-height: 45px;
    font-size: 12px;
    border: 0;
  }
  button::after {
  border: none
}
</style>
<script>
  import wexp from 'wexp/index'
  import {getUserInfo, formatTime} from '../../mixins/common.js'
  import WXBizDataCrypt from '../../mixins/WXBizDataCrypt.js'
  import {getMsg} from '../../mixins/api.js'
  import {appid} from '../../mixins/config.js'
  import regeneratorRuntime from '../../mixins/runtime'
  import Toast from 'kai-ui/toast/index'
  let fileSystemManager = wx.getFileSystemManager()
  const db = wx.cloud.database()
  const _ = db.command
  export default class extends wexp.page {
    config = {
      "navigationBarTitleText": "哇哈哈健康跑1",
      "backgroundTextStyle": "#333",
      "backgroundColor": "#F4F4F4",
      "onReachBottomDistance": 50,
      "enablePullDownRefresh": true,
      "usingComponents": {
        "area": "../components/TextArea",
        "toast": "kai-ui/toast/index",
        "k-input": "kai-ui/input/index"
      }
    }
    data = {
      popData: {
        show: true,
        position: 'center',
        maskHide: false
      },
      show: false,
      groupName: '',
      createLoading: false,
      index: 1,
      swiperIndex: 1,
      groupLimit: 3,
      list: [],
      todyGuanjun: {},
      userInfo: [],
      myGroupSort: 0, // 所在小组排名
      userMap: {}, // 用户json对象
      userList: [], // 用户列表
      groupList: [], // 分组列表
      stepTodyMap: {},
      stepTodyList: [], // 所有今日人步数列表
      stepHistoryList: [], // 历史步数列表
      stepHistoryObj: {},
      myGroup: {}, // 我加入的队伍
      grouTodyList: [], // 组队今日排行
      groupHistoryList: [] // 历史组队排行
    }
    methods = {
      close () {
        this.setData({
          show: false
        })
      },
      tabChange (e) {
        let idx = e.currentTarget.dataset.idx
        this.setData({
          swiperIndex: idx,
          index: idx
        })
      },
      inputchange (e) {
        let groupName = e.detail
        this.setData({
          groupName: groupName.trim()
        })
      },
      confirm () {
        let groupName = this.data.groupName
        this.setData({
          createLoading: true
        })
        this.createGroup(groupName)
      },
      link (e) {
        let id = e.currentTarget.dataset.id
        this.$route('navigate', './chat', {id: id})
      },
      ctg () {
        this.setData({
          show: true
        })
        // this.createGroup('奔跑吧')
      },
      swiperChange (e) {
        this.setData({
          index: e.detail.current,
          swiperIndex: e.detail.current
        })
      }
    }
    onPullDownRefresh () {
      console.log('刷新1')
      this.refresh()
    }
    onShareAppMessage (res) {
      console.log('转发', res)
      return {
        title: this.data.userInfo.nickName + '邀请你组队',
        path: '/pages/foot/foot?id=' + this.data.myGroup.mygroup.id
      }
    }
    isTody (d) {
     var td = new Date()
     td = new Date(td.getFullYear(),td.getMonth(),td.getDate())
     var od = new Date(d)
     od = new Date(od.getFullYear(),od.getMonth(),od.getDate())
     var xc = (od-td) / 1000 / 60 / 60 / 24
     return xc
    }
    getUsers () {
      let pms = db.collection('user').get()
      pms.then((res => {
        this.setData({
          userList: res.data
        })
      }))
      return pms
    }
    getUsersStepList (time) {
      let searchParm = {}
      let pms
      if (time) {
        searchParm.time = _.eq(time)
        pms = db.collection('step').where(searchParm).orderBy('step', 'desc').get()
      } else {
        pms = db.collection('step').orderBy('step', 'desc').get()
      }
      // let pms = db.collection('step').where(searchParm).orderBy('step', 'desc').get()
     return pms
    }
    // 获取所有分组
    getAllGroup () {
      return db.collection('group').get()
    }
    upateStep (step, time) {
      wx.cloud.callFunction({
        name: 'updateStep',
        data: {
          step: 100,
          time: time
        },
        complete: res => {
          console.log('callFunction test result: ', res)
        }
      })
    }
    // 创建队伍
    createGroup (name) {
      this.callCloud({
        name: 'createGroup',
        data: {
          name: name
        },
        fail: res => {
          this.setData({
            createLoading: false
          })
        },
        success: res => {
          this.setData({
            createLoading: false,
            show: false,
            myGroup: {
              hasGroup: true,
              limit: false,
              isJoin: false,
              step: 0,
              mygroup: {
                name: name,
                creator: this.data.userInfo.openId,
                _id: res._id,
                openIds: [this.data.userInfo.openId]
              }
            }
          })
          Toast.success({
            content: '创建成功'
          })
        }
      })
    }
    // 判断是否组队成功
    isGroup () {
      let groupList = this.data.groupList
      let hasGroup = false // 是否组队
      let limit = false // 是否满员
      let isJoin = false // 组队是否成功
      let myGroup = {}
      let step = 0
      let sort = 0
      for (let item of groupList) {
        let openIds = item.openIds
        let len = openIds.length
        if (openIds.indexOf(this.data.userInfo.openId) > -1 ) {
          hasGroup = true
          if (len > 1) {
            isJoin = true
          }
          if (len === this.data.groupLimit) {
            limit = true
          }
          myGroup = item
        }
      }
      for (let idx in this.data.groupHistoryList) {
        let openIds = this.data.groupHistoryList[idx].group.openIds
        if (openIds.indexOf(this.data.userInfo.openId) > -1) {
          sort = Number(idx) + 1
          step = this.data.groupHistoryList[idx].step
          break
        }
      }
      this.setData({
        myGroup: {
          hasGroup: hasGroup, // 是否已加入某个小组
          limit: limit, // 是否已满员
          isJoin: isJoin, // 是否组队成功
          step: step,
          sort: sort,
          mygroup: myGroup
        }
      })
    }
    formatUserInfo (userInfo) {
      let map = {}
      for (let item of userInfo) {
        map[item.openId] = item
      }
      console.log('格式化用户信息', map)
      this.setData({
        userMap: map
      })
    }
    formatStepHistory (all) {
      let map = {}
      let mapList = []
      for (let item of all) {
        if (map[item.openId]) {
          map[item.openId].step += item.step
        } else {
          map[item.openId] = {
            openId: item.openId,
            step: item.step
          }
        }
      }
      for (let item in map) {
        mapList.push(map[item])
      }
      mapList.sort((a, b) => {
        return b.step - a.step
      })
      for (let idx in mapList) {
        let mapObj = mapList[idx]
        if (mapObj.openId === this.data.userInfo.openId) {
          map[this.data.userInfo.openId].sort = Number(idx)+ 1
        }
      }
      console.log('所有用户总步数对象', map)
      console.log('所有用户总步数数组', mapList)
      console.log('所有步数', all)
      this.setData({
        stepHistoryList: mapList,
        stepHistoryObj: map
      })
    }
    getPageList () {
      var time = new Date()
      let that = this
      let todyTime = new Date(time.getFullYear(), time.getMonth(), time.getDate()).getTime()
      async function int () {
        let getUsers = await that.getUsers()
        let groupHistoryList = []
        that.formatUserInfo(getUsers.data)
        console.log('同步获取用户信息', getUsers)
        that.getUsersStepList(todyTime).then(res => {
          let map = {}
          console.log('今日排名', res.data)
          for (let idx in res.data) {
            let item = res.data[idx]
            item.sort = Number(idx) + 1
            map[item.openId] = item
          }
          let todyGuanjun = {
            openId: res.data[0].openId,
            img: that.data.userMap[res.data[0].openId].img,
            nick: that.data.userMap[res.data[0].openId].nick
          }
          that.setData({
            stepTodyList: res.data,
            stepTodyMap: map,
            todyGuanjun: todyGuanjun
          })
        })
        let stepall = await that.getUsersStepList()
        that.formatStepHistory(stepall.data)

        let getAllGroup = await that.getAllGroup()
        console.log('获取所有分组', getAllGroup)
        that.setData({
          groupList: getAllGroup.data
        })
        for (let item of getAllGroup.data) {
          let openIds = item.openIds
          let step = 0
          let stepHistoryObj = that.data.stepHistoryObj
          for (let id of openIds) {
            if (stepHistoryObj[id]) {
              step += stepHistoryObj[id].step
            }
          }
          if (openIds.length > 1) {
            groupHistoryList.push({
              step: step,
              group: item
            })
          }
        }
        groupHistoryList.sort((a, b) => {
          return b.step - a.step
        })
        that.setData({
          groupHistoryList: groupHistoryList
        })
        console.log('组队总榜', groupHistoryList)
        that.isGroup()
        wx.hideLoading()
        wx.stopPullDownRefresh()
        // getAllGroup.then(res => {
        //   console.log('所有分组', res)
        //   this.setData({
        //     groupList: res.data
        //   })
        // })
      }
      int()
    }
    // 加入小组
    joinGroup (id) {
      let that = this
      debugger
      this.callCloud({
        name: 'joinGroup',
        data: {
          id: id
        },
        success: res => {
          debugger
          let tip = ''
          if (res.errorMsg === 1) {
            tip = '你已加入该小组'
          } else if (res.errorMsg === 0) {
            tip = '小组不存在'
          } else if (res.errorMsg === 2) {
            tip = '小组已满员'
          } else {
            wx.showToast({
              title: '组队成功',
              icon: 'success'
            })
            Toast.success({
              content: '组队成功'
            })
          }
          if (tip) {
            Toast.show({content: tip})
            // wx.showToast({
            //   title: tip,
            //   icon: 'none'
            // })
          }
        }
      })
    }
    callCloud (obj) {
      wx.cloud.callFunction({
        name: obj.name,
        data: obj.data,
        success: res => {
          if (res.result && res.result.errorMsg) {
            Toast.error({
              content: res.result.errorMsg,
              duration: 1000
            })
            if (obj.fail) {
              obj.fail(res.result)
            }
          } else {
            console.log('成功', res)
            obj.success(res.result)
          }
        },
        fail: res => {
          Toast.error({
            content: res.errMsg,
            duration: 1000
          })
          if (obj.fail) {
            obj.fail(res.result)
          }
        }
      })
    }
    refresh () {
      let that = this
      wx.getWeRunData({
        success (res) {
          let key = wx.getStorageSync('session_key')
          // let ps = new WXBizDataCrypt(appid, key)
          wx.cloud.callFunction({
            name: 'decode',
            data: {
              a: res.encryptedData,
              b: res.iv,
              c: key
            },
            success: res => {
              let stepList = res.result.stepInfoList
              let todyStep = 0
              let todyTime = new Date()
              let today = new Date(todyTime.getFullYear(), todyTime.getMonth(), todyTime.getDate()).getTime()
              for (let item of stepList) {
                let isTody = that.isTody(item.timestamp)
                let d = new Date(item.timestamp)
                item.timestr = d.getFullYear() + '-' + (d.getMonth() + 1) + '-' + d.getDate()
                if (isTody === 0) {
                  todyStep = item.step
                }
              }
              that.upateStep(todyStep, today)
              that.setData({
                list: stepList
              })
              console.log(stepList)
            }
          })
        },
        complete () {
          that.getPageList()
        }
      })
    }
    onLoad (opt) {
      const that = this
      const pageInfo = wx.getLaunchOptionsSync()
      const groupId = pageInfo.query.id
      Toast.init('toast')
      console.log('启动参数', pageInfo)
      wx.showShareMenu({
        withShareTicket: true,
        success: res => {
          console.log('转发成功', res)
        }
      })
      wx.showLoading()
      getUserInfo().then((usr) => {
        this.setData({
          userInfo: usr
        })
        console.log('dfdfd', usr)
        db.collection('user').where({
          openId: usr.openId
        }).get().then(res => {
          if (res.data.length <= 0) {
            this.$route('navigate', './login', {})
            return
          }
          if (groupId) {
            this.joinGroup(groupId)
          }
          that.refresh()
        })

      })
    }
  }
</script>
