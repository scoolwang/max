<template>
<view class="page">
<!--   <view wx:for="{{chatList}}" class="msg-row" bindtap="toChat" data-id="{{item.msg.chatId}}" catchtap="link">
    <view class="header">
      <view class="msg-num" wx:if="{{item.len > 0}}">{{item.len }}</view>
      <image class="avatar" src="{{item.msg.img}}" />
    </view>
    <view class="content">
      <view class="row top-row">
        <view class="nick">{{item.msg.name}}</view>
        <view class="time">{{item.timeStr}}</view>
      </view>
      <view class="row">
        <view class="msg">{{item.msg.msg}}</view>
      </view>
    </view>
  </view> -->
   <view class="msg-row" wx:for="{{list}}" wx:key="time" bindtap="toChat" data-id="{{item.sendId}}" catchtap="link">
    <view class="header">
      <view class="msg-num" wx:if="{{item.status==0}}"></view>
      <image class="avatar" src="{{item.data.sendAvatar}}" />
    </view>
    <view class="content">
      <view class="row top-row">
        <view class="nick">{{item.data.sendName}}</view>
        <view class="time">{{item.timeStr}}</view>
      </view>
      <view class="row">
        <view class="msg">{{item.data.content}}</view>
      </view>
    </view>
  </view>
  <!-- <view class="msg-row" bindtap="toChat" data-id="615a7cc6-9721-11e9-b832-dca9047ef1f4" catchtap="link">
    <view class="header">
      <view class="msg-num">123</view>
      <image class="avatar" src="http://images.kaishiba.com/o_1d1uvgqul15m1oinlm11sbi1miq14.jpg" />
    </view>
    <view class="content">
      <view class="row top-row">
        <view class="nick">九妹九妹</view>
        <view class="time">2018-1-2 4:00</view>
      </view>
      <view class="row">
        <view class="msg">在吗，美女</view>
      </view>
    </view>
  </view>
  <view class="msg-row" bindtap="toChat" data-id="48b2dcde-9721-11e9-b5e9-dca9047ef1f4" catchtap="link">
    <view class="header">
      <view class="msg-num">123</view>
      <image class="avatar" src="http://images.kaishiba.com/o_1d1uvgqul15m1oinlm11sbi1miq14.jpg" />
    </view>
    <view class="content">
      <view class="row top-row">
        <view class="nick">九妹九妹</view>
        <view class="time">2018-1-2 4:00</view>
      </view>
      <view class="row">
        <view class="msg">小哥哥，带我上车</view>
        <view class="button">同意上车</view>
      </view>
    </view>
  </view>
  <view class="msg-row" bindtap="toChat" data-id="1" catchtap="link">
    <view class="header">
      <view class="msg-num">123</view>
      <image class="avatar" src="http://images.kaishiba.com/o_1d1uvgqul15m1oinlm11sbi1miq14.jpg" />
    </view>
    <view class="content">
      <view class="row top-row">
        <view class="nick">九妹九妹</view>
        <view class="time">2018-1-2 4:00</view>
      </view>
      <view class="row">
        <view class="msg">突然有事突然有事突然有事突然有事突然有事突然有事突然有事突然有事突然有事</view>
        <view class="button blue-btn">同意下车</view>
      </view>
    </view>
  </view> -->
  <!-- <view wx:if="{{chatList.length <= 0}}" class="empty">
    <text>暂无消息</text>
  </view> -->
</view>

</template>
<style>
  .page {
    padding-top: 15px;
  }
  .avatar {
    width: 50px;
    height: 50px;
    border-radius: 5px;
  }
  .msg-row {
    display: flex;
    margin: 0 15px;
    padding-bottom: 15px;
    margin-bottom: 15px;
    border-bottom: 1px solid #EAE7E7;
  }
  .header {
    position: relative;
    margin-right: 15px;

  }
  .row {
    display: flex;
    justify-content: space-between;
  }
  .nick {
    font-size: 14px;
  }
  .time, .msg {
    font-size: 12px;
    color: #999;
  }
  .msg {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    flex: 1;
    /*width: 100%;*/
  }
  .top-row {
    margin-bottom: 10px;
  }
  .content {
    flex: 1;
    overflow: hidden;
  }
  .button {
    height: 25px;
    line-height: 25px;
    padding: 0 10px;
    font-size:12px;
    font-family:PingFangSC-Medium;
    font-weight:500;
    color:rgba(255,255,255,1);
    background:rgba(124,201,134,1);
  }
  .blue-btn {
    background:#4A90E2;
  }
  .msg-num {
    color: #fff;
    font-size: 12px;
    /*height: 16px;*/
    height: 10px;
    background: #FD0000;
    position: absolute;
    top: -8px;
    right: -2px;
    border-radius: 8px;
    line-height: 16px;
    padding: 0 5px;
  }
  .empty {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    font-size: 12px;
    padding-top: 20%;
    color: #999;
  }
</style>
<script>
  import wexp from 'wexp/index'
  import {getUserInfo, formatTime} from '../mixins/common.js'
  import {getMsg, getChatUnreadMsg, getSysMsg} from '../mixins/api.js'
  let fileSystemManager = wx.getFileSystemManager()
  export default class extends wexp.page {
    config = {
      "navigationBarTitleText": "消息",
      "enablePullDownRefresh": false,
      "backgroundColor": "#f8f8f8",
      "onReachBottomDistance": 50,
      "usingComponents": {
        "area": "../components/TextArea"
      }
    }
    data = {
      list: [],
      unReadUserIds: [], // 未读消息用户id
      sort: [],
      msg: [],
      map: {},
      userInfo: {},
      chatList: [],
      sysList: [],
      applyList: [],
      historyMsg: []
    }
    methods = {
      link (e) {
        let id = e.currentTarget.dataset.id
        this.$route('navigate', './chat', {id: id})
      }
    }
    toChat () {
    }
    getChat (path, id) {
      let pms = new Promise((resolve, reject) => {
        fileSystemManager.readFile({
          filePath: path,
          encoding: 'utf8',
          success: res => {
            let content = res.data
            let list = content.split('\r\n\r\n')
            let arry = []
            if (this.data.map[id] || this.data.unReadUserIds.indexOf(id) > -1) {
              resolve()
              return
            }
            for (let chat of list) {
              if (chat) {
                let obj = JSON.parse(chat)
                arry.push(obj)
              }
            }
            let lastMsg = arry[arry.length - 1]
            let historyMsg = this.data.historyMsg
            let timeStr = formatTime(lastMsg.time)
            lastMsg.len = 0
            lastMsg.isHistory = true
            lastMsg.timeStr = timeStr
            historyMsg.push(lastMsg)
            this.setData({
              historyMsg: historyMsg
            })
            console.log('组装历史消息', historyMsg)
            resolve(historyMsg)
          }
        })
      })
      return pms
    }
    getAll () {
      let chatDir = getApp().globalData.chatDir
      let pms = new Promise((resolve, reject) => {
        getUserInfo().then((res) => {
          let userId = res.userId
          this.setData({
            userInfo: res
          })
          // 获取历史聊天记录
          fileSystemManager.readdir({
            dirPath: chatDir,
            success: res => {
              let pms = []
              for (let path of res.files) {
                let id = path.split('.')[0]
                let chatPms = this.getChat(chatDir + path, id)
                pms.push(chatPms)
              }
              Promise.all(pms).then(() => {
                resolve()
              })
            },
            fail: res => {
              resolve()
            }
          })
          // this.connectSocket()
        })
      })
      return pms
    }
    onLoad () {
      let pms = this.getAll()
      let that = this
      pms.then(res => {
        getMsg().then(res => {
          this.setData({
            applyList: res.data.apply,
            sysList: res.data.sys
          })
          let chatIds =  []
          let chatList = res.data.chat
          let applyList = res.data.apply
          let sysList = res.data.sys
          let msgs =  []
          let historyMsg = this.data.historyMsg
          for (let i  = 0; i < chatList.length; i++) {
            let sendId =  chatList[i].sendId
            let chat = chatList[i]
            let isExit = false
            chat.timeStr = formatTime(chat.time)
            for (let a = 0; a < historyMsg.length; a++) {
              let item = historyMsg[a]
              if (sendId === item.sendId) {
                historyMsg.splice(a, 1)
                historyMsg.push(chat)
                isExit = true
                break
              }
            }
            if (!isExit) {
              historyMsg.push(chat)
            }
          }

          msgs = historyMsg.concat(applyList).concat(sysList)
          msgs.sort(function(a, b) {
            a.timeStr = formatTime(a.time)
            b.timeStr = formatTime(b.time)
            return b.time -  a.time
          })
          this.setData({
            list: msgs
          })
          console.log(msgs, '组装消息页数据')
        })
      })
      wx.onSocketMessage(res => {
        let str = JSON.parse(res.data)
        let list = this.data.list

        console.log(str, '监听系统消息')
      })

      // getUnreadMsg()
      // readMsg({
      //   ids: [3]
      // })
      // getMsg().then((res) => {
      //   let sort = []
      //   let map = {}
      //   let msg = []
      //   let list = res.data
      //   for (let item of list) {
      //     let sendId = item.sendId
      //     item.timeStr = formatTime(item.time)
      //     if (map[sendId]) {
      //       map[sendId].list.push(item)
      //     } else {
      //       map[sendId] = {
      //         list: [item],
      //         avatarUrl: item.avatarUrl,
      //         name: item.name,
      //         time: item.time
      //       }
      //       sort.push(sendId)
      //     }
      //     console.log(map)
      //   }
      //   for (let val of sort) {
      //     let item = map[val]
      //     let itemList = item.list
      //     let lastList = itemList[itemList.length - 1]
      //     let timeStr = formatTime(item.time)
      //     // let msgObj = {
      //     //   msg: lastList,
      //     //   avatarUrl: item.avatarUrl,
      //     //   name: item.name
      //     // }
      //     msg.push({
      //       msg: {
      //         img: lastList.avatarUrl,
      //         name: lastList.name,
      //         msg: lastList.msg,
      //         type: lastList.type,
      //         sendId: lastList.sendId,
      //         chatId: lastList.sendId === this.data.userInfo.userId ? lastList.receiveId : lastList.sendId
      //       },
      //       time: item.time,
      //       timeStr: timeStr,
      //       isHistory: false,
      //       len: itemList.length
      //     })
      //   }
      //   this.setData({
      //     unReadUserIds: sort
      //   })
      //   console.log('组装未读消息', msg)
      //   pms.then(() => {
      //     msg = msg.concat(that.data.historyMsg)
      //     msg.sort((a, b) => {
      //       return b.time - a.time
      //     })
      //     console.log('全套消息', msg)
      //     this.setData({
      //       chatList: msg
      //     })
      //   })
      // })
    }
  }
</script>
