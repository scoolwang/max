<template>
<view class="page">
  <view class="msg-row" wx:for="{{list}}" wx:key="time" data-obj="{{item}}" data-idx="{{index}}" catchtap="link">
    <view class="header" catchtap="linkHome" data-obj="{{item}}">
      <view class="msg-num" wx:if="{{item.status==0}}">{{item.len}}</view>
      <image class="avatar" wx:if="{{userInfo.userId==item.sendId&&item.type==1}}" src="{{item.data.receiveAvatar}}" />
      <image class="avatar" wx:else src="{{item.data.sendAvatar}}" />
    </view>
    <view class="content">
      <view class="row top-row">
        <view class="nick"  wx:if="{{userInfo.userId==item.sendId&&item.type==1}}">{{item.data.receiveName}}</view>
        <view class="nick"  wx:else>{{item.data.sendName}}</view>
        <view class="time">{{item.timeStr}}</view>
      </view>
      <view class="row">
        <view class="msg 2" wx:if="{{item.type==1}}">{{item.data.content}}</view>
        <view class="msg 3" wx:if="{{item.type==3}}">{{item.data.content || '申请上车'}}</view>
        <view class="msg 3" wx:if="{{item.type==4}}">【系统提示】 关注了你</view>
        <view class="msg 3" wx:if="{{item.type==5}}">{{item.data.content}}</view>

      </view>
      <view class="activity" wx:if="{{item.type==3}}">
        <text class="type-desc">申请上车</text>
        <text class="activity">{{item.data.activityTitle}}</text>
      </view>
      <view class="activity" wx:if="{{item.type==5}}">
        <text class="type-desc" wx:if="{{item.data.replyCmtId}}">回复了你的评论</text>
        <text class="type-desc" wx:else>评论了你的帖子</text>
        <text class="activity" wx:if="{{item.data.replyCmtId}}">{{item.data.replyContent}}</text>
        <text class="activity" wx:else>{{item.data.activityTitle}}</text>
      </view>
    </view>
  </view>
  <view wx:if="{{list.length <=0}}" class="empty">
    <image src="../image/logo.png" alt="">
    <text>空空如也</text>

  </view>
</view>

</template>
<style lang="less">
  .page {
    padding-top: 15px;
  }
  .empty {
    text-align: center;
    color:#989898;
    font-size: 12px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    position: absolute;
    width: 100%;
    top: 0;
    bottom: 100px;
    image {
      width: 46px;
      height: 10px;
      margin-bottom: 10px;
    }
  }
  .activity {
    background: #fafafa;
    padding: 5px 10px;
    border-radius: 3px;
    margin-top: 10px;
    text {
      font-size: 11px;
      color: #999;
    }
    .type-desc {
      padding-right: 5px;
    }
    .activity {
      color: #333;
    }
  }
  .avatar {
    width: 50px;
    height: 50px;
    border-radius: 5px;
  }
  .msg-row {
    display: flex;
    margin: 0 15px;
    padding-bottom: 15px;
    margin-bottom: 15px;
    border-bottom: 1px solid #EAE7E7;
  }
  .header {
    position: relative;
    margin-right: 15px;

  }
  .row {
    display: flex;
    justify-content: space-between;
  }
  .nick {
    font-size: 14px;
  }
  .time, .msg {
    font-size: 12px;
    color: #999;
  }
  .time {
    width: 100px;
    text-align: right;
  }
  .msg {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    flex: 1;
    /*width: 100%;*/
  }
  .top-row {
    margin-bottom: 10px;
  }
  .content {
    flex: 1;
    overflow: hidden;
  }
  .button {
    height: 25px;
    line-height: 25px;
    padding: 0 10px;
    font-size:12px;
    font-family:PingFangSC-Medium;
    font-weight:500;
    color:rgba(255,255,255,1);
    background:rgba(124,201,134,1);
  }
  .blue-btn {
    background:#4A90E2;
  }
  .msg-num {
    color: #fff;
    font-size: 7px;
    /*height: 16px;*/
    height: 10px;
    background: #FD0000;
    position: absolute;
    top: -6px;
    right: -2px;
    border-radius: 8px;
    padding: 0 5px;
  }
  .empty {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    font-size: 12px;
    padding-top: 20%;
    color: #999;
  }
</style>
<script>
  import wexp from 'wexp/index'
  import {getUserInfo, formatTime} from '../mixins/common.js'
  import {getMsg, getChatUnreadMsg, getSysMsg, getUnreadMsgTotal, readMsg, readMsgById} from '../mixins/api.js'
  let fileSystemManager = wx.getFileSystemManager()
  export default class extends wexp.page {
    config = {
      "navigationBarTitleText": "消息",
      "enablePullDownRefresh": false,
      "backgroundColor": "#f8f8f8",
      "onReachBottomDistance": 50,
      "usingComponents": {
        "area": "../components/TextArea"
      }
    }
    data = {
      list: [],
      unReadUserIds: [], // 未读消息用户id
      sort: [],
      msg: [],
      map: {},
      userInfo: {},
      chatList: [],
      sysList: [],
      applyList: [],
      historyMsg: []
    }
    methods = {
      link (e) {
        let obj = e.currentTarget.dataset.obj
        let idx = e.currentTarget.dataset.idx
        let type = obj.type + ''
        switch (type) {
          case '1':
            let userId = obj.sendId
            if (obj.sendId === this.data.userInfo.userId) {
              userId = obj.receiveId
            }
            this.read(obj, idx)
            this.$route('navigate', './chat', {id: userId})
          break
          case '3':
            this.read(obj, idx)
            this.$route('navigate', './activity', {id: obj.data.activityId, tab: 1})
          break
          case '5':
            this.read(obj, idx)
            this.$route('navigate', './activity', {id: obj.data.activityId, tab: 0})
          break
          case '4':
            this.read(obj, idx)
            this.$route('navigate', './userHome', {id: obj.sendId})
          break
        }
      },
      linkHome (e) {
        let obj = e.currentTarget.dataset.obj
        this.$route('navigate', './userHome', {id: obj.sendId})
      }
    }
    toChat () {
    }
    read (obj, idx) {
      let set = {}
      let type = obj.type + ''
      set['list[' + idx + '].status'] = 1

      if (type === '1') {
        getApp().globalData.unreadNum = getApp().globalData.unreadNum - obj.len
        this.setData(set)
      } else {
        readMsgById({
          id: obj.id
        }).then(res => {
          getApp().globalData.unreadNum = getApp().globalData.unreadNum - res.data
          this.setData(set)
        })
      }
    }
    getChat (path, id) {
      let pms = new Promise((resolve, reject) => {
        fileSystemManager.readFile({
          filePath: path,
          encoding: 'utf8',
          success: res => {
            let content = res.data
            let list = content.split('\r\n\r\n')
            let arry = []
            if (this.data.map[id] || this.data.unReadUserIds.indexOf(id) > -1) {
              resolve()
              return
            }
            for (let chat of list) {
              if (chat) {
                let obj = JSON.parse(chat)
                arry.push(obj)
              }
            }
            let lastMsg = arry[arry.length - 1]
            let historyMsg = this.data.historyMsg
            let timeStr = formatTime(lastMsg.time).str
            lastMsg.len = 0
            lastMsg.isHistory = true
            lastMsg.timeStr = timeStr
            historyMsg.push(lastMsg)
            this.setData({
              historyMsg: historyMsg
            })
            console.log('组装历史消息', historyMsg)
            resolve(historyMsg)
          }
        })
      })
      return pms
    }
    getAll () {
      let chatDir = getApp().globalData.chatDir
      console.log('缓存目录', chatDir)
      let pms = new Promise((resolve, reject) => {
        getUserInfo().then((res) => {
          let userId = res.userId
          this.setData({
            userInfo: res
          })
          // 获取历史聊天记录
          fileSystemManager.readdir({
            dirPath: chatDir,
            success: res => {
              let pms = []
              for (let path of res.files) {
                let id = path.split('.')[0]
                let chatPms = this.getChat(chatDir + path, id)
                pms.push(chatPms)
              }
              Promise.all(pms).then(() => {
                resolve()
              })
            },
            fail: res => {
              console.error('聊天记录缓存读取失败', res)
              resolve()
            }
          })
          // this.connectSocket()
        })
      })
      return pms
    }
    init () {
      wx.showLoading()
      let pms = this.getAll()
      let userId = wx.getStorageSync('userInfo').userId
      this.setData({
        list: [],
        historyMsg:  []
      })
      pms.then(res => {
        getMsg().then(res => {
          this.setData({
            applyList: res.data.apply,
            sysList: res.data.sys
          })
          let chatIds =  []
          let chatList = res.data.chat
          let applyList = res.data.apply
          let fansList = res.data.fans
          let commentList = res.data.comment
          let sysList = res.data.sys
          let msgs =  []
          let historyMsg = this.data.historyMsg
          for (let i  = 0; i < chatList.length; i++) {
            let sendId =  chatList[i].sendId
            let receiveId =  chatList[i].receiveId
            let chat = chatList[i]
            let isExit = false
            chat.timeStr = formatTime(chat.time).str
            console.log(userId)
            console.log(sendId)
            for (let a = 0; a < historyMsg.length; a++) {
              let item = historyMsg[a]
              let msgWay = [sendId, receiveId]
              if (msgWay.indexOf(item.sendId) > -1 && msgWay.indexOf(item.receiveId) > -1) {
                historyMsg.splice(a, 1)
                chat.len = (item.len || 0) + 1
                historyMsg.push(chat)
                isExit = true
                break
              }
            }
            if (!isExit) {
              chat.len = 1
              historyMsg.push(chat)
            }
          }

          msgs = historyMsg.concat(applyList).concat(sysList).concat(commentList).concat(fansList)
          msgs.sort(function(a, b) {
            a.timeStr = formatTime(a.time).str
            b.timeStr = formatTime(b.time).str
            return b.time -  a.time
          })
          this.setData({
            list: msgs
          })
          wx.hideLoading()
          console.log(msgs, '组装消息页数据')
        })
      })
    }
    onLoad () {

      let that = this
      wx.onSocketMessage(res => {
        let str = JSON.parse(res.data)
        let list = this.data.list
        for (let idx in list) {
          let item = list[idx]
          let sendId =  item.sendId
          let receiveId =  item.receiveId
          let msgWay = [sendId, receiveId]
          let type = item.type + ''
          if (msgWay.indexOf(str.sendId) > -1 && msgWay.indexOf(str.receiveId) > -1 && type === '1') {
            list.splice(idx, 1)
            break
          }
        }
        str.timeStr = formatTime(str.time).str
        str.status = 0
        list.unshift(str)
        this.setData({
          list: list
        })
        console.log(list, '监听系统消息')
      })
      this.init()
      getUnreadMsgTotal().then(res => {
        let num = res.total > 0 ? res.total : null
        getApp().globalData.unreadNum = res.total
        if (num) {
          wx.setTabBarBadge({
            index: 1,
            text: num
          })
        } else {
          wx.removeTabBarBadge({
            index: 1
          })
        }
      })
    }
    onShow () {
      let total = getApp().globalData.unreadNum
      let num = total > 0 ? total + '' : ''
      if (num) {
        wx.setTabBarBadge({
          index: 1,
          text: num
        })
      } else {
        wx.removeTabBarBadge({
          index: 1
        })
      }

    }
  }
</script>
