<template>
<scroll-view scroll-y style="height: {{height}}px;" class="scroll-page" scroll-top="{{scrollTop}}">
<!-- <scroll-view > -->
  <view id="page">
    <view wx:for="{{chatList}}" class="item-wrap" wx:key="index">
      <view wx:if="{{item.type==1}}" class="item {{item.sendId === userInfo.userId? 'user-item':'to-item'}}">
        <view class="avatar" wx:if="{{item.sendId === userInfo.userId}}" data-id="{{item.sendId}}" bindtap="linkHome">
          <image class="avatar-img" src="{{userInfo.avatarUrl}}" />
        </view>
        <view  class="avatar" data-id="{{item.sendId}}" bindtap="linkHome" wx:else>
          <image class="avatar-img" src="{{toUserInfo.avatarUrl}}" />
        </view>
        <view class="msg">{{item.data.content}}</view>
      </view>
      <view wx:if="{{item.type==0}}">
        <view class="time-tip">{{item.data}}</view>
      </view>
    </view>
    <view class="bottom"></view>
  </view>
</scroll-view>
<!-- </scroll-view> -->

  <view class="send-input" id="bottom"><input placeholder="请输入聊天内容" bindinput="change" value="{{content}}" confirm-type="send" bindconfirm="send" /></view>
  <!-- <view>{{chatList.length}}</view>
  <view wx:key="index">
    <view>时间{{item.timeStr}}</view>
    <view>内容{{item.data}}</view>
    <view>id:{{item.from}}</view>
  </view> -->
</template>
<style>

  ::-webkit-scrollbar {
    width: 0;
    height: 0;
    color: transparent;
  }
  #page {
    padding: 0 10px;

  }
  .avatar-img {
    width: 40px;
    height: 40px;
    border-radius: 5px;
  }
  .msg {
    margin: 0 15px;
  }
  .item-wrap {

  }
  .item {
    display: flex;
    margin-bottom: 25px;
  }
  .user-item {
    flex-direction: row-reverse;
  }
  .item .msg {
    background: #eeeeee;
    border-radius: 5px;
    font-size: 16px;
    padding: 10px 15px;
    color: #333;
    margin-right:
  }
  .user-item .msg {
    background: #1177EF;
    border-radius: 5px;
    font-size: 16px;
    padding: 10px 15px;
    color: #fff;
    margin-left: 50px;
  }
  .to-item .msg {
    margin-right: 50px;
  }
  .avatar {
    height: 40px;
  }
  .time-tip {
    text-align: center;
    color: #999;
    font-size: 14px;
    margin: 25px 0;
  }
  .send-input {
    position: fixed;
    width: 100%;
    bottom: 0;
    left: 0;
    background: #FFFFFF;
    box-shadow: 0 0 7px 0 rgba(65,65,65,0.14);
    height: 50px;
  }
  .send-input input {
    height: 50px;
    font-size: 14px;
    color: #999;
    line-height: 50px;
    padding: 0 15px;
  }
  .bottom {
    height: 60px;
  }
</style>
<script>
  import wexp from 'wexp/index'
  import {getUserInfo, msgHandle} from '../mixins/common.js'
  import {getUserById, getUnreadMsg, addMsg, readMsg} from '../mixins/api.js'
  let fileSystemManager = wx.getFileSystemManager()
  export default class extends wexp.page {
    config = {
      "navigationBarTitleText": "聊天",
      "enablePullDownRefresh": false,
      "backgroundTextStyle": "dark",
      "backgroundColor": "#f8f8f8",
      "onReachBottomDistance": 50,
      "usingComponents": {
        "area": "../components/TextArea"
      }
    }
    data = {
      unreadMsg: [],
      userInfo: {},
      toUserInfo: {},
      content: '',
      socketTask: '',
      chatList: [],
      chatList1: [],
      toId: '',
      timeTag: '',
      height: '',
      scrollTop: 10000
    }
    methods = {
      change (b) {
        this.setData({
          'content': b.detail.value
        })
      },
      linkHome (e) {
        let id = e.currentTarget.dataset.id
        this.$route('navigate', './userHome', {id: id})
      },
      send (e) {
        let msgObj = {
          sendId: this.data.userInfo.userId,
          receiveId: this.data.toId,
          type: 1,
          data: {
            sendAvatar: this.data.userInfo.avatarUrl,
            sendName: this.data.userInfo.name,
            content: this.data.content,
            receiveAvatar: this.data.toUserInfo.avatarUrl,
            receiveName: this.data.toUserInfo.name
          }
        }
        this.sendMsg(msgObj, 0)
        // msgObj = JSON.stringify(msgObj)

      }
    }

    sendMsg (msgObj, i) {
      let that = this
      this.data.socketTask.send({
        data: JSON.stringify(msgObj),
        fail () {
          console.error(i + '次')
          if (i > 3) {
            return
          }
          i++
          that.connect(function () {
            that.sendMsg(msgObj, i)
          }, function () {
          })
          console.error('消息发送失败')
        },
        success: res => {
          let time = new Date().getTime()
          msgObj.time = time
          console.log(msgObj, '聊天发送串')
          this.msgHandle(msgObj)
          this.setData({
            content: ''
          })
        }
      })
    }
    fileDir () {
      let chatDir = getApp().globalData.chatDir
      return chatDir
    }

    fileChat () {
      let chatDir = getApp().globalData.chatDir
      return chatDir + this.data.toId + '.json'
    }
    /** data
     *  data.time 时间戳
     *  data.from 聊天对象用户id
     *  data.data 聊天消息
     *  data.type 消息类型 0：用户聊天 1：时间戳
     *  data.avatarUrl 消息主体头像
     *  data.nick 消息主体昵称
     *  data.toAvatarUrl 消息接受者头像
     *  data.toNick 消息接受者昵称
     */
    msgHandle (data) {
      // let time = data.time
      // let innserTag = false
      let arry = this.data.chatList
      // let timeTag = this.formateTime(time)
      // if (!this.data.timeTag) {
      //   innserTag = true
      // } else {
      //   if (time - this.data.timeTag > 5 * 60 * 1000) {
      //     innserTag = true
      //   }
      // }
      // if (innserTag) {
      //   let obj = {
      //     type: 0,
      //     time: time,
      //     timeStr: timeTag[0] + '年' + timeTag[1] + '月' + timeTag[2] + '日 ' + (timeTag[3] < 10 ? '0' + timeTag[3] : timeTag[3]) + ':' + (timeTag[4] < 10 ? '0' + timeTag[4] : timeTag[4]),
      //     data: timeTag[3] + ':' + timeTag[4]
      //   }
      //   arry.push(obj)
      //   this.setData({
      //     timeTag: time
      //   })
      //   this.writeChatFile(obj)
      // }
      // arry.push(data)
      // this.writeChatFile(data)
      // console.log(data, '新增聊天对象')
      let fileDir = this.fileChat()
      let ret = msgHandle(data, this.data.timeTag, fileDir)
      arry = arry.concat(ret.data)
      this.setData({
        timeTag: ret.lastTimeTag
      })
      this.setData({
        chatList: arry
      })
      setTimeout(() => {
        this.scrollBottom()
      })
    }
    formateTime (time) {
      let d = time ? new Date(time) : new Date()
      let y = d.getFullYear()
      let m = d.getMonth() - 1
      let day = d.getDay()
      let hh = d.getHours()
      let mm = d.getMinutes()
      let ss = d.getSeconds()

      return [y, m, day, hh, mm, ss]
    }
    createFile () {
      console.log(this.fileDir())
      // let that = this
      fileSystemManager.stat({
        path: this.fileDir(),
        success: res => {
          console.log('目录存在', this.fileDir())
          // fileSystemManager.rmdir({
          //   dirPath: this.fileDir(),
          //   success: function () {
          //     console.log('删除目录成功')
          //   }
          // })
          // this.mkDir(userId)
          // this.writeChatFile(userId)
        },
        fail: res => {
          console.log('目录不存在', this.fileDir(), res)
          this.mkDir()
        }
      })
    }
    // 创建聊天记录存储目录
    mkDir () {
      fileSystemManager.mkdir({
        dirPath: this.fileDir(),
        success (res) {
          console.log('创建目录成功')
          console.log(res)
          // that.writeChatFile(userId)
        },
        fail (res) {
          console.log('创建目录失败')
          console.log(res)
        }
      })
    }
    // 把聊天记录写入到本地文件
    writeChatFile (str) {
      let data = JSON.stringify(str) + '\r\n\r\n'
      let userId = this.data.userInfo.userId
      let chatUserId = this.data.toId
      let fileDir = this.fileChat()
      // let fileDir = wx.env.USER_DATA_PATH +  '/test.txt'
      console.log('文件目录')
      fileSystemManager.stat({
        path: fileDir,
        success: res => {
          console.log('文件存在', res)
          fileSystemManager.appendFile({
            // filePath: res.savedFilePath,
            filePath: fileDir,
            data: data,
            encoding: 'utf8',
            success (res) {
              console.log('追加1', res)
            },
            fail (res) {
              console.log('追加2', res)
            }
          })
        },
        fail: res => {
          console.log('文件不存在', fileDir, res)
          /*
           * writeFile第一天消息无法写入，所以先新建文件，再appFile追加新消息
           *
           *
           */
          fileSystemManager.writeFile({
            // filePath: res.savedFilePath,
            filePath: fileDir,
            data: '\r\n\r\n',
            encoding: 'utf8',
            success (res) {
              fileSystemManager.appendFile({
                // filePath: res.savedFilePath,
                filePath: fileDir,
                data: data,
                encoding: 'utf8',
                success (res) {
                  console.log('追加3', res)
                },
                fail (res) {
                  console.log('追加4', res)
                }
              })
            },
            fail (res) {
              console.log('写入失败', res)
            }
          })
        }
      })
    }
    // 获取聊天记录
    getChatList (path) {
      fileSystemManager.readFile({
        filePath: path,
        encoding: 'utf8',
        success: res => {
          let content = res.data
          let list = content.split('\r\n\r\n')
          let arry = []
          for (let chat of list) {
            if (chat) {
              let obj = JSON.parse(chat)
              arry.push(obj)
            }
          }
          this.setData({
            chatList: arry,
            timeTag: arry[arry.length - 1].time
          })
          console.log('读取文件内容', arry)
          wx.getSystemInfo({
            success: res => {
              console.log(res)
            }
          })
          this.scrollBottom()
          // wx.pageScrollTo({
          //   scrollTop: rect.bottom
          // })
          // wx.createSelectorQuery().select('page').boundingClientRect(function(rect){
          //   // 使页面滚动到底部
          //   wx.pageScrollTo({
          //     scrollTop: rect.bottom
          //   })
          // }).exec()
        }
      })
    }
    // 获取历史聊天记录
    readChatList () {
      let userId = this.data.userInfo.userId
      let path = this.data.toId + '.json'
      this.getChatList(this.fileDir() + '/' + path)
      // fileSystemManager.readdir({
      //   dirPath: this.fileDir(),
      //   success: res => {
      //     console.log('递归', res)
      //     for (let path of res.files) {
      //       let chatId = path.split('.')[0]
      //       if (chatId === this.data.toId) {
      //         this.getChatList(this.fileDir() + '/' + path)
      //       }
      //     }
      //   }
      // })
    }
    scrollBottom () {
      let that = this

      wx.createSelectorQuery().select('#page').boundingClientRect(function(rect){
        console.log(rect)
        // 使页面滚动到底部
        that.setData({
          scrollTop: rect.height + rect.bottom + 80
        })
        console.log('滚动', that.data.scrollTop)
      }).exec()
    }
    connect (success, fail) {
      let that = this
      let userId = this.data.userInfo.userId
      let url = 'ws://192.168.21.37:9000?sendId=' + userId +'&receiveId=' + this.data.toId
      let socketTask = wx.connectSocket({
        url: url,
        fail (res) {
          if (fail) {
            fail()
          }
          console.error('webscoket链接失败', res)
        },
        success (res) {
          if (success) {
            setTimeout(success, 100)
          }
          console.log('链接成功', res)
        }
      })
      that.setData({
        socketTask: socketTask
      })

      // 接受消息
      socketTask.onMessage((data) => {
        console.log(data)
        let item = JSON.parse(data.data)
        console.log(item, '接收到的消息')
        /** 消息接受的用户Id不等于当前聊天对象的id，怎把此条消息存储到数据库中 */
        if (item.sendId !== this.data.toId) {
          // addMsg({
          //   sendId: str.sendId,
          //   receiveId: userId,
          //   data: str,
          //   time: str.time,
          //   type: str.type
          // })
          return
        }
        this.msgHandle(item)
      })
      socketTask.onClose((data) => {
        console.error('连接已关闭')
      })
    }
    init () {
      let userId = this.data.userInfo.userId
      // 穿件聊天记录存储本地文件
      this.createFile(userId)
      this.connect()

      getUserById({userId: this.data.toId}).then(res => {
        console.log('聊天对象', res)
        this.setData({
          toUserInfo: res.data
        })
        wx.setNavigationBarTitle({
          // title: res.data.name
          title: '九妹'
        })
      })

      let info = wx.getSystemInfoSync()
      this.setData({
        height: info.windowHeight
      })
      this.readChatList()
      this.getUnreadMsg()
      readMsg({
        receiveId: userId,
        sendId: this.data.toId,
        type: 1
      })
    }
    getUnreadMsg () {
      getUnreadMsg({
        id: this.data.toId
      }).then(res => {
        let msg = res.data
        for (let item of msg) {
          item.data = JSON.parse(item.data)
          /** 将未读消息存储到本地 */
          // item.data.sendAvatar = this.data.toUserInfo.avatarUrl
          // item.data.sendName = this.data.toUserInfo.name
          // item.data.receiveAvatar = this.data.userInfo.avatarUrl
          // item.data.receiveName = this.data.userInfo.name
          this.msgHandle(item)
        }
        getApp().globalData.unreadNum = getApp().globalData.unreadNum - msg.length
        wx.setTabBarBadge({
          index: 1,
          text: getApp().globalData.unreadNum + ''
        })
        /** 获取未读消息 */
        console.log('获取用户未读消息')
        console.log(res)
      })
    }
    onLoad (opt) {
      this.setData({
        toId: opt.id
      })
    }
    onShow () {
      console.log('show')
      console.log(this.data)
      // let that = this
      getUserInfo().then((res) => {
        console.log('ceshi')
        console.log(res)
        this.setData({
          userInfo: res
        })
        this.init()
      })

    }
    onHide () {
      console.log('hide')
      this.data.socketTask.close()
    }
    onUnload () {
      console.log('onUnload')
      this.data.socketTask.close()
    }
  }
</script>
