<template>
<!-- <swiper class="type-module" display-multiple-items="4">
  <block wx:for="{{seachList}}" wx:key="id">
    <swiper-item class="dota type-box" catch:tap="goGameList" data-id="{{item.id}}"  data-name="{{item.name}}">
      <text class="type-name">{{item.name}}</text>
    </swiper-item>
  </block>
</swiper> -->
  <view class="type-module-wrap">
    <view class="type-module">
      <k-tab id="tab" custom-class="header-tab" />
    </view>
  </view>
  <button open-type="getUserInfo">打开授权设置页1</button>
  <view  wx:for="{{list}}" wx:key="id">

    <card class="module" item="{{item}}">
    </card>
  </view>

<view class="edit" bindtap="editActivity">
  <text class="iconfont icon-edit"></text>
</view>
<confirm show="{{modalShow}}" bindclose="closeConfirm" bindok="send">
  <view class="confirm-view">
    <input class="send-input" maxlength="20" placeholder-class="input-placeholder" placeholder="留言" bindinput="inputChange" />
  </view>
</confirm>
</template>

<script>
  import Tab from 'kai-ui/tab/index'
  import wexp from 'wexp/index'
  import {getActivityList} from '../mixins/api.js'
  const palyVoidContext = wx.createInnerAudioContext()
  export default class extends wexp.page {
    config = {
      "navigationBarTitleText": "首页",
      "enablePullDownRefresh": false,
      "backgroundColor": "#f7f7f7",
      "onReachBottomDistance": 50,
      "usingComponents": {
        "confirm": "../components/confirm",
        "card": "../components/card",
        "void": "../components/void",
        "k-tab": "kai-ui/tab/index"
      }
    }
    data = {
      list: [],
      tabData: {
        list: [
          {
            id: 1,
            title: '萌妹'
          },
          {
            id: 2,
            title: '大神'
          },
          {
            id: 3,
            title: '有位'
          },
          {
            id: 4,
            title: '最新发布'
          },
          {
            id: 5,
            title: '最早发车'
          },
          {
            id: 6,
            title: '附近的人'
          }
        ],
        scroll: true,
        selectedId: 4,
        class: 'tab-success'
      },
      modalShow: false,
      send: {
        txt: '',
        id: ''
      }
    }
    methods = {
      goActivity () {
        this.$route('navigate', './activity')
      },
      editActivity () {
        this.$route('navigate', './addActivity')
      },
      goChat (e) {
        let id = e.currentTarget.dataset.id
        this.$route('navigate', './chat', {id: id})
      },
      goHome (e) {
        let id = e.currentTarget.dataset.id
        this.$route('navigate', './userHome', {id: id})
      },
      format (time) {
        this.formatTime(time)
      },
      playVoice (item) {
        let src = item.currentTarget.dataset.hi
        palyVoidContext.stop()
        palyVoidContext.src = src
        palyVoidContext.play()
      }
    }
    onLoad (opt) {
      // wx.setNavigationBarTitle({
      //   title: opt.name
      // })
      // Tab._init('#tab', this.data.tabData)
      console.log(wx.getSystemInfoSync())
      // this.getData()
    }
    onShow () {
      this.getData()
    }
    formatTime (time) {
      let dateTime = new Date(time)
      let year = dateTime.getFullYear()
      let month = dateTime.getMonth() + 1
      let day = dateTime.getDate()
      let hour = dateTime.getHours()
      let minute = dateTime.getMinutes()
      let second = dateTime.getSeconds()
      let nowDate = new Date().getTime()
      let str = hour + ':' + (minute < 10 ? '0' + minute : minute)
      if (nowDate - time <= 60 * 60 * 12) {
        return str
      } else {
        return year + '-' + month + '-' + day + ' ' + str
      }
    }
    formatCreateTime (time) {
      let dateTime = new Date(time)
      let year = dateTime.getFullYear()
      let month = dateTime.getMonth() + 1
      let day = dateTime.getDate()
      let hour = dateTime.getHours()
      let minute = dateTime.getMinutes()
      let second = dateTime.getSeconds()
      let now = new Date()
      let nowDate = new Date().getTime()
      let spaceTime = nowDate - time
      let timeSpanStr = ''
      if (spaceTime <= 60000) {
        timeSpanStr = '刚刚'
      } else if (60 * 1 < spaceTime && spaceTime <= 60 * 60) {
        timeSpanStr = Math.round((spaceTime / (60))) + '分钟前'
      } else if (60 * 60 * 1 < spaceTime && spaceTime <=  60 * 60 * 24) {
        timeSpanStr = Math.round(spaceTime / ( 60 * 60)) + '小时前';
      }
      else if (60 * 60 * 24 < spaceTime && spaceTime <=  60 * 60 * 24 * 15) {
        timeSpanStr = Math.round(spaceTime / ( 60 * 60 * 24)) + '天前';
      }
      else if (spaceTime > 60 * 60 * 24 * 15 && year == now.getFullYear()) {
        timeSpanStr = month + '-' + day + ' ' + hour + ':' + minute;
      } else {
        timeSpanStr = year + '-' + month + '-' + day + ' ' + hour + ':' + minute;
      }
      return timeSpanStr
    }
    formatLevel (level, rank, levelStart) {
      // let map = {
      //   '1': 'guardian',
      //   '2': 'crusader',
      //   '3': 'archon',
      //   '1': 'legend',
      //   '1': 'ancient',
      //   '1': 'divine',
      //   '1': 'immortal_elite',
      //   '1': 'immortal_top100',
      //   '1': 'immortal_top10',
      // }
      let immortal = ['immortal_elite', 'immortal_top10', 'immortal_top100']
      let src = 'https://cdn.max-c.com/app/dota2/leaderboard/'
      if (immortal.indexOf(level) > -1) {
        src = src + level + '.png'
      } else {
        src = src + level + (levelStart === 0 ? '' : '_' + levelStart) + '.png'
      }
      console.log(level)
      return src
    }
    getData () {
      getActivityList({
        page: 1,
        pageSize: 10
      }).then((res) => {
        let list = res.data
        for (let item of list) {
          item.startTime = this.formatTime(item.startTime)
          item.createTime = this.formatCreateTime(item.createTime)
          // item.level = this.formatLevel(item.level)
          item.level = ''
          item.passenger = item.seat - item.vacancy
          let imgs = item.cover ? item.cover.split(',') : []
          for (let idx in imgs) {
            let url = imgs[idx]
            var params = {}
            url.replace(/([^?&]+)=([^&]+)/g, (_,k,v) => params[k]=v)
            let wh = params.wh ? params.wh.split(':') : []
            let width = wh[0]
            let screen = wx.getSystemInfoSync().windowWidth - 20
            width = width > screen ? screen : width
            imgs[idx] = {
              url: url,
              width: width
            }
          }
          item.cover = imgs
        }
        this.setData({
          list: list
        })
        console.log(list)
      })
    }
  }
</script>
<style>
  page {
    background: #f7f7f7;
  }
  .type-module-wrap {
    height: 50px;
    width: 100%;
  }
  .type-module {
    position: fixed;
    width: 100%;
    height: 50px;
    border-top: 1px solid #f3f3f3;
    top: 0;
  }
  .header-tab {
    border-bottom: 1px solid #f3f3f3;
  }
  .edit {
    position: fixed;
    right: 20px;
    bottom: 30px;
    width:35px;
    height:35px;
    background:rgba(113,140,82,1);
    box-shadow:0px 2px 4px 0px rgba(91,91,91,0.5);
    border:1px solid rgba(255,255,255,1);
    text-align: center;
    line-height: 35px;
    font-size: 20px;
    font-weight: bold;
    color: #fff;
    border-radius: 50%;
  }


</style>
