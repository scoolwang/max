<template>
<view class="game-type">
  <swiper display-multiple-items="4">
    <block wx:for="{{seachList}}" wx:key="id">
      <swiper-item class="dota type-box" catch:tap="selectGame" data-id="{{item.id}}"  data-name="{{item.name}}">
        <view class="game-box {{gameId==item.id?'active-game-box':''}}">
          <view class="logo-box">
            <image class="game-logo" src="{{item.logo}}" />
          </view>

          <text class="type-name">{{item.name}}</text>
        </view>

      </swiper-item>
    </block>
  </swiper>
</view>
<view   class="game-type-solt"></view>


<!-- <view class="type-module-wrap">
  <view class="type-module">
    <k-tab id="tab" custom-class="header-tab" />
  </view>
</view> -->
<!-- <button open-type="getUserInfo">打开授权设置页1</button> -->
<!-- <loading></loading> -->
<view  wx:for="{{list}}" wx:key="id">

  <card class="module" item="{{item}}">
  </card>

</view>
<view wx:if="{{list.length <=0}}" class="empty">
  <image src="../image/logo.png" alt="">
  <text>空空如也</text>

</view>
<view class="loading-box" wx:if="{{loading&&hasMore}}">
  <loading></loading>
</view>

<view class="tabbar-slot"></view>


<view class="edit" catchtap="editActivity">
  <text class="iconfont icon-edit"></text>
</view>
<confirm show="{{modalShow}}" bindclose="closeConfirm" bindok="send">
  <view class="confirm-view">
    <input class="send-input" maxlength="20" placeholder-class="input-placeholder" placeholder="留言" bindinput="inputChange" />
  </view>
</confirm>
</template>

<script>
  import Tab from 'kai-ui/tab/index'
  import wexp from 'wexp/index'
  import {getActivityList, getGameList} from '../mixins/api.js'
  import {formatTime} from '../mixins/common.js'
  const palyVoidContext = wx.createInnerAudioContext()
  export default class extends wexp.page {
    config = {
      "navigationBarTitleText": "开黑首页",
      "enablePullDownRefresh": true,
      "backgroundColor": "#f7f7f7",
      "onReachBottomDistance": 50,
      "usingComponents": {
        "confirm": "../components/confirm",
        "card": "../components/card",
        "void": "../components/void",
        "loading": "../components/loading",
        "k-tab": "kai-ui/tab/index"
      }
    }
    data = {
      list: [],
      tabData: {
        list: [
          {
            id: 1,
            title: '萌妹'
          },
          {
            id: 2,
            title: '大神'
          },
          {
            id: 3,
            title: '有位'
          },
          {
            id: 4,
            title: '最新发布'
          },
          {
            id: 5,
            title: '最早发车'
          },
          {
            id: 6,
            title: '附近的人'
          }
        ],
        scroll: true,
        selectedId: 4,
        class: 'tab-success'
      },
      gameId: '',
      seachList: [],
      modalShow: false,
      page: 1,
      pageSize: 3,
      animation: '',
      loading: false,
      hasMore: true
    }
    methods = {
      goActivity () {
        this.$route('navigate', './activity')
      },
      editActivity () {
        this.$route('navigate', './addActivity', {
          gameId: this.data.gameId
        })
      },
      goChat (e) {
        let id = e.currentTarget.dataset.id
        this.$route('navigate', './chat', {id: id})
      },
      goHome (e) {
        let id = e.currentTarget.dataset.id
        this.$route('navigate', './userHome', {id: id})
      },
      format (time) {
        this.formatTime(time)
      },
      playVoice (item) {
        let src = item.currentTarget.dataset.hi
        palyVoidContext.stop()
        palyVoidContext.src = src
        palyVoidContext.play()
      },
      selectGame (item) {
        let id = item.currentTarget.dataset.id
        this.setData({
          gameId: id,
          page: 1
        })
        this.getData(true)
      }
    }
    onPullDownRefresh () {
      this.setData({
        page: 1
      })
      this.getData(true)
    }
    onReachBottom () {
      console.log('上拉加载')
      if (this.data.loading || !this.data.hasMore) {
        return
      }
      this.setData({
        page: this.data.page + 1,
        loading: true
      })
      this.getData()
    }
    onLoad (opt) {
      // wx.setNavigationBarTitle({
      //   title: opt.name
      // })
      wx.showShareMenu({
        withShareTicket: true
      })
      wx.showLoading()
      getGameList().then(res =>{
        let list = res.data
        list.unshift({
          id: '',
          name: '全部',
          logo: 'https://sta-op.douyucdn.cn/dycatr/6b1ca7930ebf10c660f46dfda64a3f64.png'
        })
        this.setData({
          seachList: res.data
        })
      })
      this.setData({
        page: 1
      })
      this.getData(true)
    }
    onShow () {

    }
    formatTime (time) {
      let dateTime = new Date(time)
      let year = dateTime.getFullYear()
      let month = dateTime.getMonth() + 1
      let day = dateTime.getDate()
      let hour = dateTime.getHours()
      let minute = dateTime.getMinutes()
      let second = dateTime.getSeconds()
      let nowDate = new Date().getTime()
      let str = hour + ':' + (minute < 10 ? '0' + minute : minute)
      if (nowDate - time <= 60 * 60 * 12) {
        return str
      } else {
        return year + '-' + month + '-' + day + ' ' + str
      }
    }
    formatLevel (level, rank, levelStart) {
      // let map = {
      //   '1': 'guardian',
      //   '2': 'crusader',
      //   '3': 'archon',
      //   '1': 'legend',
      //   '1': 'ancient',
      //   '1': 'divine',
      //   '1': 'immortal_elite',
      //   '1': 'immortal_top100',
      //   '1': 'immortal_top10',
      // }
      let immortal = ['immortal_elite', 'immortal_top10', 'immortal_top100']
      let src = 'https://cdn.max-c.com/app/dota2/leaderboard/'
      if (immortal.indexOf(level) > -1) {
        src = src + level + '.png'
      } else {
        src = src + level + (levelStart === 0 ? '' : '_' + levelStart) + '.png'
      }
      console.log(level)
      return src
    }
    getData (isRefresh) {
      getActivityList({
        page: this.data.page,
        pageSize: this.data.pageSize,
        gameId: this.data.gameId
      }).then((res) => {
        let list = res.data
        let total = res.total
        for (let item of list) {
          let startTime = formatTime(item.startTime)
          console.log(startTime)
          item.startTime = startTime.isTody ? (startTime.h + ':' + startTime.m) : startTime.y + '-' + startTime.m + '-' + startTime.d + ' ' +  startTime.h + ':' + startTime.mt
          item.createTime = formatTime(item.createTime).str
          // item.level = this.formatLevel(item.level)
          item.level = ''
          item.passenger = item.seat - item.vacancy
          let imgs = item.cover ? item.cover.split(',') : []
          for (let idx in imgs) {
            let url = imgs[idx]
            var params = {}
            url.replace(/([^?&]+)=([^&]+)/g, (_,k,v) => params[k]=v)
            let wh = params.wh ? params.wh.split(':') : []
            let width = wh[0]
            let screen = wx.getSystemInfoSync().windowWidth - 20
            width = width > screen ? screen : width
            imgs[idx] = {
              url: url,
              width: width
            }
          }
          item.cover = imgs
        }
        if (isRefresh) {
          this.setData({
            list: list
          })
        } else {
          this.setData({
            list: this.data.list.concat(list)
          })
        }
        this.setData({
          loading: false
        })
        if (this.data.list.length >= total) {
          this.setData({
            hasMore: false
          })
        } else {
          this.setData({
            hasMore: true
          })
        }
        wx.stopPullDownRefresh()
        wx.hideLoading()
        console.log(list)
      })
    }
  }
</script>
<style  lang="less">
  .loading-box  {
    display: flex;
    justify-content: center;
    align-items: center;
  }
  .empty {
    text-align: center;
    color:#989898;
    font-size: 12px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    position: absolute;
    width: 100%;
    top: 100px;
    bottom: 100px;
    image {
      width: 46px;
      height: 10px;
      margin-bottom: 10px;
    }
  }
  page {
    background: #f7f7f7;
  }
  .game-type-solt {
    height: 70px;
    margin-bottom: 10px;
  }
  .game-type {
    position: fixed;
    width: 100%;
    border-top: 1px solid #f3f3f3;
    top: 0;
    background: #fff;
    height: 70px;
    z-index: 11;
  }
  .type-module {

  }
  .header-tab {
    border-bottom: 1px solid #f3f3f3;
  }
  .edit {
    position: fixed;
    right: 20px;
    bottom: 30px;
    width:35px;
    height:35px;
    background:#4A90E2;
    box-shadow:0px 2px 4px 0px rgba(91,91,91,0.5);
    border:1px solid rgba(255,255,255,1);
    text-align: center;
    line-height: 35px;
    font-size: 20px;
    font-weight: bold;
    color: #fff;
    border-radius: 50%;
  }

  .game-logo{
    width: 32px;
    height: 32px;
  }
  .game-box {
    text-align: center;
    height: 70px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    transition: background 0.5s;
  }
  .type-name {
    font-size: 12px;
  }
  .type-box {
    height: 70px;
  }
  swiper {
    height: 70px;
  }
  .active-game-box {
    /*background: linear-gradient(157deg, #2c66bf 0%, #8393c3 100%);*/
    background: #4A90E2;
    .type-name {
      color: #fff;
    }

  }
  .tabbar-slot {
    height: 60px;
  }
</style>
